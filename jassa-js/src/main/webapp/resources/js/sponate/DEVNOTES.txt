Below notes are probably outdated and the raised issues solved already!
It is pretty clear now how transparent label aggregation can be done.


A major goal of Sponate is to unify access to labels and provide conflict resolution.


var labelElementFactory

{
	name: 'labels',
	scope: { prefLangs: ['en', 'de', 'fr', ''] }
	scopeProvider: null // indirection
	vars: { // Convenient row mapper
	    foo: 'lang(?l)'
	},
	template: [{
		id: '?s',
  		label: '?l | doreplace(old, new)' // false -> old, true -> new
	}],
	from: '?s rdfs:label ?l',
	joinConceptProvider: someObject // optional
}





Maybe rather than a priority function it is already sufficient to just have a function that
compares a prior value (possibly null) with the new one.
This is probably the best approach.

So then the thing is, that based on an array of preferred languages, one has to
configure the conflict resulution and also make them part of the from-element....

Is there a non-verbose way of doing that?






Priority functions:
- The first argument is the expression value (instance of NodeValue or null)
- The second argument is the whole binding

var priority = function(nodeValue, binding)

//label: { $config: { value: '?l', priority:} }



Priorities must be non-negative, otherwise values will be discarded




Client side criterias, skip and limit...

Lets assume we cannot completely translate a criteria to SPARQL filter conditions.
This means that the response of the server may be more general than what was requested.





	// ISSUE How to use the labels map together with a prepared query?
	// Even more severe, we need to represent simple query plans so that
	// we can find out the best join strategy: For example, computing the facets
	// at some node in the tree may be very expensive - extending the query to fetch
	// the child facets could be even more expensive - hence, if there are only
	// a few parent resources, we may use the explicit set of resources.
	// TODO unprecise - rephrase to clarify what i mean
	
	
	// ISSUE How to retrieve the names of properties in the facet tree?
	// We already have the label map, but now we need to invoke it for a set of resources
	// -> Content aware caching desired / use of the binding cache

	
	




